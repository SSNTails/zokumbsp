Author
======

(c) 2016-2017 Kim Roar Fold√∏y Hauge
(c) 1995-2004 Marc Rousseau (ZenNode base)

Description
===========

ZokumBSP is an advanced node/blockmap/reject builder for Id tech 1 games such
as Doom, Doom 2, Final Doom, Heretic, Hexen, Strife, Hacx. I is bsed on
ZenNode 1.2.0 and available from Git Hub and as a binary release for select
operating systems.

This is an experimental Doom tool, expect the occasional bug. It has features
that allow for the construction of bigger and more complex maps than ZenNode
and many other similar tools.

It has BOOM-specific handling, but the main development is for vanilla 1.9
executables and Chocolate Doom.

Index
=====

01. Project goals
02. Basic usage
03. Doom V1.9 limits / algorithms
04. Special effects
05. Geometry pass
06. Blockmap builder
07. Nodes builder
08. Reject builder
09. Other options
10. Compatibility
11. Usage together with other tools
12. Other resources
13. Changelog
14. Acknowledgements.
15. Other node builders.

Section 01: Project goals
=========================

The main goal of ZokumBSP was to provide a node builder that is compatible
with ZenNode and the classic version 1.9 Doom 2 executable, referred to in
this document as classic Doom. Support for other source ports, feature and 
limit wise is within the goal as long as it doesn't interfere with classic
Doom support.

* Non-Doom games *
Hexen, Heretic and Strife etc support is within the scope of the project as
nice-to-have, the features for these executables that already exist in the
game will be kept, but not tested when new code is added due to the added
complexity this would cause.

* Slot in for ZenNode *
An important aspect of ZokumBSP is to be a slot-in-replacement for ZenNode.
One should be able to run it with the exact same paramaters as ZenNode and get
a comparable result, hopefully with a better runtime performance or a better
built structure.

* Bigger and more complex maps in classic Doom *
One important goal of the project is to enable mappers to make maps that are
bigger and more complex than other similar tools can do and still stay
playable in classic doom. 

* Advanced and novel special effects *
Finally, by adding more switches, options and tweaks, the tool should enable
mappers to add new special effects that rely on the final data structure
output from the tool to have certain properties.

Section 02: Basic usage
=======================

* Basic syntax *

The basic usage is just like ZenNode, although some argument parsing bugs has
been cleaned up to allow for the addition of other parameters.

To build a map for use in Doom, simply invoke: "ZokumBSP mapfile.wad" where
you substitute mapfile.wad with the name of your map.

* Help screen *

You can see a help screen with a terse command overview by simply invoking
ZokumBSP without any arguments.

The help screen has more lines than a standard 25 line terminal, so the use of
a higher-resolution terminal or a scrollback buffer is recommended to see all
the available information.

* Supported arguments / switches *

Most supported parameters are explained in sections 5 to 10.

Section 03: Doom v1.9 limits / algorithms
=========================================

There are a number of limitations size wise for a Doom map, and this document
won't cover all of them, only the ones that are relevant to a node, blockmap
and reject builder.

* Sidedefs *

A map can't contain more than 32768 sidedefs. A tool called dshrink can reduce
the amount of sidedefs by combining identical side defs. For very big maps,
the usage of this tool in addition to ZokumBSP could make maps not normally
playable in Doom playable. Some ports have changed the sidedef limit to 65536.

* Linedefs *

The limit of linedefs is the same as sidedefs. It is possible to have more
linedefs than sidedefs if dshrink is used to compress the map. There isn't
much that can be done about this static limit. It should be noted that turning
on geometric simplification compression can increase the number of linedefs,
possibly leading to a map that will crash Doom. 

TODO: Fix max-linedefs limit crash bug!

* Segs *

Segs are linedef segments and are used by the rendering part of the engine.
The limit is on these are also 32768 segs. At least one seg is created for
every linedef, two for a two-sided linedef etc. Additional segs are also
created as part of the node building process, this happens when the node
builder splits a sector into smaller subsectors, creating a new seg where a
line is split. Different partitioning algorithms can change the amount of segs
in a map. For more information about segs-count manipulation, see the special
effects chapter of the manual.

* Vertices *

The limit for vertices is the same as many other structures, 32678. It should
be noted that a node builder will add verices to a map when it splits a seg
into several segs as part of the node building process. All node builders do
this. It is theoretically possible to create a map with more vertices than
segs or linedefs, but in practice this is very rare. This is most easily done
by adding a lot of two-sided lines in the middle of a sector where both sides
belong to the same sector. These lines can then be used for trigger lines, but
will not generate segs, and with 2 vertices per line, it can theoretically go
over the limit.

Section 04: Special effects
===========================

* Invisible floors / deep water *
Adding a sector inside another with sector references on both sidedefs of all
the involved linedefs in the new sector, will make it act as a height changing
sector compare to the rendered floor. If a the invisible sector has a lower
floor level it can be used for a deep water styele effect, where it looks like
one is wading in deeper water. It should be noted that things like trees,
monsters, players are drawn completely, ruining the effect so use this
sparingly in areas where you can see other players or monsters inside that
area.

For invisible floors, there are no clipping problems, but be aware that stairs
are hard for monsters to ascend and descend if the height difference is too
big.

* Do not add to blockmap - 'tag 999' *

Linedefs tagged with the tag 999 will not be added to the blockmap, this can
allow you to add architecture that will not incrase the blockmap. If used
correctly, this can lower the size of the blockmap. In Doom a lot of the
architecture is mainly for decoration, often only in the ceiling. Since one
cannot look up or down, it is in most cases impossible or very hard to hit
these lines. Adding such lines will allow for nice architecture without making
the blockmap bigger, making it possible to put more architecture into a map
than what would normally be possible. This will also speed up collision
detection and in some ports the line of sight calculations. This is due to the
reduced amount of linedef the engine has to check in an area.

* No render tag for linedef - 'tag 998' *

By setting the tag to 998 on a linedef, this line will not be rendered by the
Doom engine. More specifically, this will not create a seg out of that
linedef. This can be used to add impassible lines and manually simplified
geometry. See the sun section on that.

* Manually simplified geometry *

By using a combination of blockmap only lines and rendering only geometry the
size of the blockmap can be reduced. If one has a rounded corner that consists
of 16 linedefs, one could surround that corner, possibly reuse vertices to
only 4 collissionable linedefs. Another good example would be simplifying
geometry on is never near into simpler shapes, and flag the more complicated
geoemtry just behind as non-collidable. This will ensure that stray projctiles
and shots are still colliding, but not at the exact location of the rendered
geometry.

Section 05: Geometry pass
=========================

The geometry pass is a pass one the level done before the blockmap, nodes and
reject maps are done. It will find the basic dimensions of the map and will
also apply some geometry changes used by later steps like the blockmap, nodes
and reject steps.

Currently the only geometry change possible is the collission geometry step,
which is outlined in the blockmap builder chapter.

Section 06: Blockmap builder
============================

The blockmap builder has gone through a very substantial update of the old
ZenNode base. There are a lot of new options available. 

All blockmap parameters must follow after the main -b parameter. Typically
something like -bo=1s=0g=2.

The blockmap is rebuilt by default, to turn this off, invoke ZokumBSP with the
paramter "-b-".

The blockmap consists of a small header that gives the dimensionsons and
coordinate system of the map, a set of 2-byte values that represent a grid of
128 by 128 game units with the values being addresses of a list of linedefs
that exist in that specific block.

It is possible to exceed the maximum size of a classic Doom blockmap purely by
having a too large grid. The exact size of the blockmap is undefined, due to
the addresses of the start of the list can only be within 65536 bytes. A list
can be of variable length, with the list entries extending beyond 65536 bytes.

'c' - Compress BLOCKMAP

This turns on basic compression of the blockmap. This makes identical lists
only appear once in the blockmap. The code in ZokumBSP performs a better
search than ZenNode, and will yield a better result in many cases due to
checking more eligible lists. ZenNode would mostly find identical lists from
the same row, but not same column or diagonally.

'h' - Output BLOCKMAP data as HTML.

This will oputput a simple html output to the standard output. On a unix-like
operation system, this output can be piped into a file, and with some minor
edits of the file, produce a color coded visualization of the offset addresses
in the grid part of the blockmap. 

'i' - Id compatible BLOCKMAP. Sets 'o=1n=2' and 'c-s-r-'

This switch will turn on and off several other switches and options for the
blockmap in order to attempt to produce blockmaps that are demo compatible
with the ones produced by Id's DoomBSP tool. Although they are compressed
unlike Id's many off the advanced techniques are disabled and the grid offset
is always set to 8,8 compare to the bottom most and left most vertex. 

It should be noted that not all IWAD maps have been built with DoomBSP, and
using it on these maps could break demo compability. This most likely applies
to: 

Ultimate Doom: e4m7.
Doom 2: No maps.
Final Doom TNT.wad: All maps.
Final Doom Plutonia.wad: All maps.
id Map01 idmap01.wad: map01

'o' -Offset configuration.



                         0 = ZenNode 0,0 offset BLOCKMAP.
                         1 = DooMBSP / BSP 8,8 offset BLOCKMAP.
                   *     2 = Best of 36 offset combinations.
                         3 = Heuristic method to reduce from 65536 offsets.
                         4 = Best of all 65536 offset combinations.
                         x,y = Specify specific offsets.
    r              *   - Remove non-collidable lines from BLOCKMAP.
    s                  - Subset compress BLOCKMAP.
    z                    - Zero header configuration.
                         0 = No zero header.
                   *     1 = Conventional zero header.
                         2 = Zero footer.
    g                  - Geometry simplification.
                   *     0 = No simplification.
                         1 = Only if same sector.
                         2 = Also 1-sided lines in different sectors.
    b                  - Build big 32bit BLOCKMAP.


Section 07: Nodes builder
=========================

Nothing has changed from the node code found in ZenNode.

Section 08: Reject builder
==========================

Only one thing has been changed from the reject builder code found in ZenNode.
A overflow was fixed by using a bigger integer type of variable, allowing
reject maps to be built for very big levels. It has been tested for reject
maps with over ten thousand sectors.

Section 09: Other options
=========================

Section 10: Compatibility
=========================

* 32 and 64 bit *

ZokumBSP was developed on a 64bit system, and has not been tested on 32bit
systems. Hopefully this will be tested in the future to ensure a wide range of
systems can run this tool. 

The reject pass of the tool utilizes a 64bit integer in a non-time-sensitive
part of the code to avoid an overflow found in ZenNode.

* Operation systems *
Linux:

ZokumBSP was primarily developed on Linux, using gcc, and should hopefully
work well on most distributions. ZokumBSP was developed on a x86 64bit system,
and has not yet been tested on a 32 bit system. 

Windows:

The Windows versions are usually mingw static compiles built on a Windows
machine from the same source tree as the Linux version.

It's usually compiled with -O2 and no special architecture specific switches,
but will most likely require a semi modern win32 platform. Only Windows 7 has
been tested extensively. So far no one has reported problems with
incompatibilities, so it's likely one can assume it works well on other
versions of this operating system.

BSD:

No BSD builds have been tested.

DOS:

No DOS ports have been tested. ZenNode supported DOS builds, and there hasn't
been any changes to the code base that would make this an impossible feat.

Section 11: Usage together with other tools
===========================================

* Command line *

* GZ Doom Builder *

Section 12: Other resources
===========================

If you are interested in more information about ZokumBSP and the Doom specs,
try the following resources:

Project web site: http://doom2.net/zokum/zokumbsp
Github: https://github.com/zokum-no/zokumbsp
Wiki: https://doomwiki.org

Section 13: Changelog
=====================

The changelog is kept in a seperate file, 'changelog.txt'. 

Section 14: Acknowledgements
============================

Marc Roussaeu - ZenNode
Brad Specer - Web site layout and feedback
Dew - Feedback and bug testing
Anders Johnsen - Feedback and suggestions
Linquica - Feedback and information
Eternity Engine - Adding compatibility fixes and testing
#nightmare - Feedback and support
#d**** - Feedback and information
#notetern... - Feedback and inforamtion

Section 15: Other node builders
===============================

* Regular node builder *

ZenNode: ?
BSP: ?
DoomBSP / IdBSP: ?

* GL Node builders *

GLBSP: ?

